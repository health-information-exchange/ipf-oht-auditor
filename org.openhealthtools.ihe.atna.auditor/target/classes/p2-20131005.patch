Index: src/org/openhealthtools/ihe/atna/auditor/codes/dicom/DICOMActiveParticipantRoleIdCodes.java
===================================================================
--- src/org/openhealthtools/ihe/atna/auditor/codes/dicom/DICOMActiveParticipantRoleIdCodes.java	(revision 1868)
+++ src/org/openhealthtools/ihe/atna/auditor/codes/dicom/DICOMActiveParticipantRoleIdCodes.java	(working copy)
@@ -14,7 +14,7 @@
 import org.openhealthtools.ihe.atna.auditor.models.rfc3881.CodedValueType;
 
 /**
- * DICOM Supplement 95 code definitions for Active Participant Roles
+ * DICOM PS 3-2011 code definitions for Active Participant Roles
  * 
  * @author <a href="mailto:glenn@almaden.ibm.com">Glenn Deen</a>
  * @since Eclipse OHF IHE 0.1.0
@@ -59,33 +59,33 @@
 	}
 	
 	/**
-	 * "DCM","110152", "Destination"
+	 * "DCM","110152", "Destination Role ID"
 	 *
 	 * @since Eclipse OHF IHE 0.1.0
 	 */
 	public static class  Destination extends DICOMActiveParticipantRoleIdCodes
 	{
 		/**
-		 * "DCM","110152", "Destination"
+		 * "DCM","110152", "Destination Role ID"
 		 */
 		public Destination()
 		{
-			super("110152", "Destination");
+			super("110152", "Destination Role ID");
 		}
 	}
 	/**
-	 * "DCM","110153", "Source"
+	 * "DCM","110153", "Source Role ID"
 	 *
 	 * @since Eclipse OHF IHE 0.1.0
 	 */
 	public static class  Source extends DICOMActiveParticipantRoleIdCodes
 	{
 		/**
-		 * "DCM","110153", "Source"
+		 * "DCM","110153", "Source Role ID"
 		 */
 		public Source()
 		{
-			super("110153", "Source");
+			super("110153", "Source Role ID");
 		}
 	}
 	/**
Index: src/org/openhealthtools/ihe/atna/auditor/codes/dicom/DICOMEventIdCodes.java
===================================================================
--- src/org/openhealthtools/ihe/atna/auditor/codes/dicom/DICOMEventIdCodes.java	(revision 1868)
+++ src/org/openhealthtools/ihe/atna/auditor/codes/dicom/DICOMEventIdCodes.java	(working copy)
@@ -14,7 +14,7 @@
 import org.openhealthtools.ihe.atna.auditor.models.rfc3881.CodedValueType;
 
 /**
- * Audit Event ID codes from DICOM Supplement 95
+ * Audit Event ID codes from DICOM PS 3-2011
  * 
  * @author <a href="mailto:glenn@almaden.ibm.com">Glenn Deen</a>
  * @since OHF IHE 0.1.0
@@ -63,18 +63,18 @@
 		}
 	}
 	/**
-	 * "DCM","110102","Being Transfering DICOM Instances"
+	 * "DCM","110102","Begin Transferring DICOM Instances"
 	 *
 	 * @since Eclipse OHF IHE 0.1.0
 	 */
 	public static class  BeginTransferringDICOMInstances extends DICOMEventIdCodes
 	{
 		/**
-		 * "DCM","110102","Being Transfering DICOM Instances"
+		 * "DCM","110102","Begin Transferring DICOM Instances"
 		 */
 		public BeginTransferringDICOMInstances()
 		{
-			super("110102","Being Transfering DICOM Instances");
+			super("110102","Begin Transferring DICOM Instances");
 		}
 	}
 	/**
@@ -161,7 +161,7 @@
 	public static class  NetworkEntry extends DICOMEventIdCodes
 	{
 		/**
-		 * "DCM","110108","Network Activity"
+		 * "DCM","110108","Network Entry"
 		 */
 		public NetworkEntry()
 		{
@@ -199,18 +199,18 @@
 		}
 	}
 	/**
-	 * "DCM","110111","Proceedure Record"
+	 * "DCM","110111","Procedure Record"
 	 *
 	 * @since Eclipse OHF IHE 0.1.0
 	 */
-	public static class  ProceedureRecord extends DICOMEventIdCodes
+	public static class  ProcedureRecord extends DICOMEventIdCodes
 	{
 		/**
-		 * "DCM","110111","Proceedure Record"
+		 * "DCM","110111","Procedure Record"
 		 */
-		public ProceedureRecord()
+		public ProcedureRecord()
 		{
-			super("110111","Proceedure Record");
+			super("110111","Procedure Record");
 		}
 	}
 	/**
Index: src/org/openhealthtools/ihe/atna/auditor/codes/dicom/DICOMEventTypeCodes.java
===================================================================
--- src/org/openhealthtools/ihe/atna/auditor/codes/dicom/DICOMEventTypeCodes.java	(revision 1868)
+++ src/org/openhealthtools/ihe/atna/auditor/codes/dicom/DICOMEventTypeCodes.java	(working copy)
@@ -14,7 +14,8 @@
 import org.openhealthtools.ihe.atna.auditor.models.rfc3881.CodedValueType;
 
 /**
- *
+ * Audit Event Type Code from DICOM PS 3-2011
+ *  
  * @author Glenn Deen  <a href="mailto:glenn@almaden.ibm.com">glenn@almaden.ibm.com</a>
  *
  * @since Eclipse OHF IHE 0.1.0
@@ -107,14 +108,14 @@
 		}
 	}
 
-	public static class EmergencyOverride extends DICOMEventTypeCodes
+	public static class EmergencyOverrideStarted extends DICOMEventTypeCodes
 	{
 		/**
-		 * "DCM","110127", "Emergency Override"
+		 * "DCM","110127", "Emergency Override Started"
 		 */
-		public EmergencyOverride()
+		public EmergencyOverrideStarted()
 		{
-			super("110127", "Emergency Override");
+			super("110127", "Emergency Override Started");
 		}
 	}
 
@@ -228,5 +229,59 @@
 		}
 	}
 
+	public static class EmergencyOverrideStopped extends DICOMEventTypeCodes
+	{
+		/**
+		 * "DCM","110138", "Emergency Override Stopped"
+		 */
+		public EmergencyOverrideStopped()
+		{
+			super("110138", "Emergency Override Stopped");
+		}
+	}
 
+	public static class RemoteServiceOperationStarted extends DICOMEventTypeCodes
+	{
+		/**
+		 * "DCM","110139", "Remote Service Operation Started"
+		 */
+		public RemoteServiceOperationStarted()
+		{
+			super("110139", "Remote Service Operation Started");
+		}
+	}
+
+	public static class RemoteServiceOperationStopped extends DICOMEventTypeCodes
+	{
+		/**
+		 * "DCM","110140", "Remote Service Operation Stopped"
+		 */
+		public RemoteServiceOperationStopped()
+		{
+			super("110140", "Remote Service Operation Stopped");
+		}
+	}
+
+	public static class LocalServiceOperationStarted extends DICOMEventTypeCodes
+	{
+		/**
+		 * "DCM","110141", "Local Service Operation Started"
+		 */
+		public LocalServiceOperationStarted()
+		{
+			super("110141", "Local Service Operation Started");
+		}
+	}
+
+	public static class LocalServiceOperationStopped extends DICOMEventTypeCodes
+	{
+		/**
+		 * "DCM","110142", "Local Service Operation Stopped"
+		 */
+		public LocalServiceOperationStopped()
+		{
+			super("110142", "Local Service Operation Stopped");
+		}
+	}
+
 }
Index: src/org/openhealthtools/ihe/atna/auditor/codes/dicom/DICOMParticipantObjectIDTypeCode.java
===================================================================
--- src/org/openhealthtools/ihe/atna/auditor/codes/dicom/DICOMParticipantObjectIDTypeCode.java	(revision 1868)
+++ src/org/openhealthtools/ihe/atna/auditor/codes/dicom/DICOMParticipantObjectIDTypeCode.java	(working copy)
@@ -14,7 +14,8 @@
 import org.openhealthtools.ihe.atna.auditor.models.rfc3881.CodedValueType;
 
 /**
- * Audit Participant Object ID Type Code from DICOM Supplement 95
+ * Audit Participant Object ID Type Code from DICOM PS 3-2011
+ *  
  * @author Glenn Deen  <a href="mailto:glenn@almaden.ibm.com">glenn@almaden.ibm.com</a>
  *
  * @since Eclipse OHF IHE 0.1.0
@@ -58,18 +59,18 @@
 		}
 	}
 	/**
-	 * "DCM","110182", "NodeID"
+	 * "DCM","110182", "Node ID"
 	 *
 	 * @since Eclipse OHF IHE 0.1.0
 	 */
 	public static class  NodeID extends DICOMParticipantObjectIDTypeCode
 	{
 		/**
-		 * "DCM","110182", "NodeID"
+		 * "DCM","110182", "Node ID"
 		 */
 		public NodeID()
 		{
-			super("110182", "NodeID");
+			super("110182", "Node ID");
 		}
 	}
 }
Index: src/org/openhealthtools/ihe/atna/auditor/codes/dicom/DICOMSecurityAlertTypeCodes.java
===================================================================
--- src/org/openhealthtools/ihe/atna/auditor/codes/dicom/DICOMSecurityAlertTypeCodes.java	(revision 1868)
+++ src/org/openhealthtools/ihe/atna/auditor/codes/dicom/DICOMSecurityAlertTypeCodes.java	(working copy)
@@ -13,11 +13,11 @@
 
 
 /**
- * Security Alert Type Code from DICOM Supplement 95
+ * Security Alert Type Code from DICOM PS 3-2011
  * 
  * @author <a href="mailto:glenn@almaden.ibm.com">Glenn Deen</a>
  * @since Eclipse OHF IHE 0.1.0
- */
+ */                                    
 public abstract class DICOMSecurityAlertTypeCodes extends DICOMEventTypeCodes
 {
 	protected DICOMSecurityAlertTypeCodes(String value, String meaning)
@@ -42,18 +42,18 @@
 	}
 	
 	/**
-	 * "DCM","110127", "Emergency Override"
+	 * "DCM","110127", "Emergency Override Started"
 	 * 
 	 * @since Eclipse OHF IHE 0.1.0
 	 */
-	public static class  EmergencyOverride extends DICOMSecurityAlertTypeCodes
+	public static class  EmergencyOverrideStarted extends DICOMSecurityAlertTypeCodes
 	{
 		/**
-		 * "DCM","110127", "Emergency Override"
+		 * "DCM","110127", "Emergency Override Started"
 		 */
-		public EmergencyOverride()
+		public EmergencyOverrideStarted()
 		{
-			super("110127", "Emergency Override");
+			super("110127", "Emergency Override Started");
 		}
 	}
 	
Index: src/org/openhealthtools/ihe/atna/auditor/context/AuditorModuleConfig.java
===================================================================
--- src/org/openhealthtools/ihe/atna/auditor/context/AuditorModuleConfig.java	(revision 1868)
+++ src/org/openhealthtools/ihe/atna/auditor/context/AuditorModuleConfig.java	(working copy)
@@ -96,7 +96,7 @@
     /**
      * Config reference key for the default port
      */
-    public static final String AUDITOR_AUDIT_REPOSITORY_DEFAULT_TRANSPORT = "TLS";
+    public static final String AUDITOR_AUDIT_REPOSITORY_DEFAULT_TRANSPORT = "UDP";
     
     /**
      * List of auditors disabled by this configuration instance
Index: src/org/openhealthtools/ihe/atna/auditor/events/ihe/QueryEvent.java
===================================================================
--- src/org/openhealthtools/ihe/atna/auditor/events/ihe/QueryEvent.java	(revision 1868)
+++ src/org/openhealthtools/ihe/atna/auditor/events/ihe/QueryEvent.java	(working copy)
@@ -93,16 +93,29 @@
 				null);
 	}
 	
-	public void addXCPDParticipantObject(String homeCommunityId, byte[] queryByParameterBytes){
+	public void addXCPDParticipantObject(String queryId, String homeCommunityId, byte[] queryByParameterBytes){
 		this.addParticipantObjectIdentification(
 				this.eventType, 
 				homeCommunityId, 
 				queryByParameterBytes, 
 				null,
-				null, // profile requests "Stored Query Id" here, but makes no sense- waiting on K Witting 
+				queryId,
 				RFC3881ParticipantObjectTypeCodes.SYSTEM, 
 				RFC3881ParticipantObjectTypeRoleCodes.QUERY,
 				null, 
 				null);
 	}
+
+    public void addQedParticipantObject(String queryId, byte[] queryByParameterBytes) {
+        addParticipantObjectIdentification(
+                this.eventType,
+                null,
+                queryByParameterBytes,
+                null,
+                queryId,
+                RFC3881ParticipantObjectTypeCodes.SYSTEM,
+                RFC3881ParticipantObjectTypeRoleCodes.QUERY,
+                null,
+                null);
+    }
 }
Index: src/org/openhealthtools/ihe/atna/auditor/models/rfc3881/AuditMessage.java
===================================================================
--- src/org/openhealthtools/ihe/atna/auditor/models/rfc3881/AuditMessage.java	(revision 1868)
+++ src/org/openhealthtools/ihe/atna/auditor/models/rfc3881/AuditMessage.java	(working copy)
@@ -81,7 +81,7 @@
     	
     	sb.append("<AuditMessage");
     	sb.append(" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
-    	sb.append(" xsi:noNamespaceSchemaLocation=\"healthcare-security-audit.xsd\"");
+    	// sb.append(" xsi:noNamespaceSchemaLocation=\"healthcare-security-audit.xsd\"");
     	sb.append(">");
     	sb.append(eventIdentification.toString(useSpacing));
     	if (!EventUtils.isEmptyOrNull(activeParticipant)) {
Index: src/org/openhealthtools/ihe/atna/auditor/utils/EventUtils.java
===================================================================
--- src/org/openhealthtools/ihe/atna/auditor/utils/EventUtils.java	(revision 1868)
+++ src/org/openhealthtools/ihe/atna/auditor/utils/EventUtils.java	(working copy)
@@ -22,27 +22,45 @@
 
 public class EventUtils 
 {
-	
-	public static String getAddressForUrl(String address, boolean resolveForIp)
-	{
-		URI uri;
-		String hostName = "";
-		try {
-			uri = new URI(address);
-			hostName = uri.getHost();
-			if (!resolveForIp) {
-				return hostName;
-			}
-			return InetAddress.getByName(uri.getHost()).getHostAddress();
 
-		} catch (UnknownHostException e) {
-			return hostName;
-		} catch (Exception e) {
-			return "0.0.0.0";
-		}
-	}
-	
+    /**
+     * Extract host name from the given endpoint URI.
+     * @see <a href="http://tools.ietf.org/html/rfc3986#section-3">RFC 3986, Section 3</a>
+     *
+     * @param address
+     *      endpoint URI or bare IP address.
+     * @param resolveForIp
+     *      dummy.
+     * @return
+     *      host name contained in the URI.
+     */
+    public static String getAddressForUrl(String address, boolean resolveForIp) {
+        if (address == null) {
+            return null;
+        }
 
+        // drop schema
+        int pos = address.indexOf("://");
+        if (pos > 0) {
+            address = address.substring(pos + 3);
+        }
+
+        // drop user authentication information
+        pos = address.indexOf('@');
+        if (pos > 0) {
+            address = address.substring(pos + 1);
+        }
+
+        // drop trailing parts: port number, query parameters, path, fragment
+        for (int i = 0; i < address.length(); ++i) {
+            char c = address.charAt(i);
+            if ((c == ':') || (c == '?') || (c == '/') || (c == '#')) {
+                return address.substring(0, i);
+            }
+        }
+        return address;
+    }
+
 	
 	public static CodedValueType getIHETransactionCodeFromMessage(AuditEventMessage msg)
 	{
Index: src/org/openhealthtools/ihe/atna/auditor/XCAInitiatingGatewayAuditor.java
===================================================================
--- src/org/openhealthtools/ihe/atna/auditor/XCAInitiatingGatewayAuditor.java	(revision 1868)
+++ src/org/openhealthtools/ihe/atna/auditor/XCAInitiatingGatewayAuditor.java	(working copy)
@@ -70,7 +70,7 @@
 				new IHETransactionEventTypeCodes.CrossGatewayQuery(), eventOutcome, 
 				getAuditSourceId(), getAuditEnterpriseSiteId(),
 				initiatingGatewayUserId, getSystemAltUserId(), initiatingGatewayUserName, getSystemNetworkId(),
-				null,
+				initiatingGatewayUserName, initiatingGatewayUserName, false,
 				respondingGatewayEndpointUri, null,
 				storedQueryUUID, adhocQueryRequestPayload, homeCommunityId, 
 				patientId);
@@ -87,7 +87,7 @@
 	 */	
 	public void auditCrossGatewayRetrieveEvent(RFC3881EventOutcomeCodes eventOutcome, 
 			String respondingGatewayEndpointUri,
-			String initiatingGatewayUserId, String initiatingGatewayUserName, 
+			String initiatingGatewayUserId, String initiatingGatewayUserName,
 			String[] documentUniqueIds, String[] repositoryUniqueIds, String homeCommunityId) 
 	{
 		if (!isAuditorEnabled()) {
@@ -97,6 +97,13 @@
 		importEvent.setAuditSourceId(getAuditSourceId(), getAuditEnterpriseSiteId());
 		importEvent.addSourceActiveParticipant(respondingGatewayEndpointUri, null, null, EventUtils.getAddressForUrl(respondingGatewayEndpointUri, false), false);
 		importEvent.addDestinationActiveParticipant(initiatingGatewayUserId, getSystemAltUserId(), initiatingGatewayUserName, getSystemNetworkId(), true);
+
+        if (!EventUtils.isEmptyOrNull(initiatingGatewayUserId)) {
+			importEvent.addHumanRequestorActiveParticipant(initiatingGatewayUserId, null, initiatingGatewayUserName, null);
+		} else if(!EventUtils.isEmptyOrNull(initiatingGatewayUserName)) {
+            importEvent.addHumanRequestorActiveParticipant(initiatingGatewayUserName, null, initiatingGatewayUserName, null);
+        }
+
 		if (!EventUtils.isEmptyOrNull(documentUniqueIds)) {
 			for (int i=0; i<documentUniqueIds.length; i++) {
 				importEvent.addDocumentParticipantObject(documentUniqueIds[i], repositoryUniqueIds[i], homeCommunityId);
@@ -126,7 +133,9 @@
 		if (!isAuditorEnabled()) {
 			return;
 		}
-		XDSRepositoryAuditor.getAuditor().auditRetrieveDocumentSetEvent(eventOutcome, consumerUserId, consumerUserName, consumerIpAddress, repositoryEndpointUri, documentUniqueIds, repositoryUniqueIds, homeCommunityIds);
+		XDSRepositoryAuditor.getAuditor().auditRetrieveDocumentSetEvent(eventOutcome, consumerUserId,
+                consumerUserName, consumerIpAddress, repositoryEndpointUri,
+                documentUniqueIds, repositoryUniqueIds, homeCommunityIds);
 	}
 
 	/**
Index: src/org/openhealthtools/ihe/atna/auditor/XCARespondingGatewayAuditor.java
===================================================================
--- src/org/openhealthtools/ihe/atna/auditor/XCARespondingGatewayAuditor.java	(revision 1868)
+++ src/org/openhealthtools/ihe/atna/auditor/XCARespondingGatewayAuditor.java	(working copy)
@@ -73,7 +73,7 @@
 				new IHETransactionEventTypeCodes.CrossGatewayQuery(), eventOutcome, 
 				getAuditSourceId(), getAuditEnterpriseSiteId(), 
 				initiatingGatewayUserId, null, initiatingGatewayUserName, initiatingGatewayIpAddress, 
-				null,
+				initiatingGatewayUserName, initiatingGatewayUserName, false,
 				respondingGatewayEndpointUri, getSystemAltUserId(), 
 				storedQueryUUID, adhocQueryRequestPayload, homeCommunityId, 
 				patientId);
@@ -95,6 +95,7 @@
 			RFC3881EventOutcomeCodes eventOutcome,
 			String initiatingGatewayUserId, String initiatingGatewayIpAddress,
 			String respondingGatewayEndpointUri,
+            String initiatingGatewayUserName,
 			String[] documentUniqueIds, String[] repositoryUniqueIds, String homeCommunityId) 
 	{
 		if (!isAuditorEnabled()) {
@@ -103,6 +104,13 @@
 		ExportEvent exportEvent = new ExportEvent(true, eventOutcome, new IHETransactionEventTypeCodes.CrossGatewayRetrieve());
 		exportEvent.setAuditSourceId(getAuditSourceId(), getAuditEnterpriseSiteId());
 		exportEvent.addSourceActiveParticipant(respondingGatewayEndpointUri, getSystemAltUserId(), null, EventUtils.getAddressForUrl(respondingGatewayEndpointUri, false), false);
+
+        if (!EventUtils.isEmptyOrNull(initiatingGatewayUserId)) {
+			exportEvent.addHumanRequestorActiveParticipant(initiatingGatewayUserId, null, initiatingGatewayUserName, null);
+		} else if(!EventUtils.isEmptyOrNull(initiatingGatewayUserName)) {
+            exportEvent.addHumanRequestorActiveParticipant(initiatingGatewayUserName, null, initiatingGatewayUserName, null);
+        }
+
 		exportEvent.addDestinationActiveParticipant(initiatingGatewayUserId, null, null, initiatingGatewayIpAddress, true);
 		//exportEvent.addPatientParticipantObject(patientId);
 		if (!EventUtils.isEmptyOrNull(documentUniqueIds)) {
@@ -118,18 +126,21 @@
 	 * 
 	 * @param eventOutcome The event outcome indicator
 	 * @param repositoryEndpointUri The Web service endpoint URI for the document repository
-	 * @param repositoryUniqueId The XDS.b RepositoryUniqueId value for the repository
+	 * @param repositoryUniqueIds The XDS.b RepositoryUniqueId value for the repository
 	 * @param documentUniqueIds The list of Document Entry UniqueId(s) for the document(s) retrieved
 	 * @param homeCommunityId The home community id used in the transaction
 	 */	
 	public void auditRetrieveDocumentSetEvent(RFC3881EventOutcomeCodes eventOutcome, 
-			String repositoryEndpointUri, 
-			String[] documentUniqueIds, String[] repositoryUniqueIds, String homeCommunityId) 
+			String repositoryEndpointUri,
+            String userName,
+			String[] documentUniqueIds, String[] repositoryUniqueIds, String homeCommunityId)
 	{
 		if (!isAuditorEnabled()) {
 			return;
 		}
-		XDSConsumerAuditor.getAuditor().auditRetrieveDocumentSetEvent(eventOutcome, repositoryEndpointUri, documentUniqueIds,  repositoryUniqueIds, homeCommunityId, null);
+		XDSConsumerAuditor.getAuditor().auditRetrieveDocumentSetEvent(eventOutcome, repositoryEndpointUri,
+                userName,
+                documentUniqueIds,  repositoryUniqueIds, homeCommunityId, null);
 	}
 	
 	/**
@@ -144,14 +155,17 @@
 	 */
 	public void auditRegistryStoredQueryEvent(
 			RFC3881EventOutcomeCodes eventOutcome,
-			String registryEndpointUri, 
+			String registryEndpointUri,
+            String consumerUserName,
 			String storedQueryUUID, String adhocQueryRequestPayload, String homeCommunityId,
 			String patientId) 
 	{
 		if (!isAuditorEnabled()) {
 			return;
 		}
-		XDSConsumerAuditor.getAuditor().auditRegistryStoredQueryEvent(eventOutcome, registryEndpointUri, storedQueryUUID, adhocQueryRequestPayload, homeCommunityId, patientId);
+		XDSConsumerAuditor.getAuditor().auditRegistryStoredQueryEvent(eventOutcome, registryEndpointUri,
+                consumerUserName, storedQueryUUID, adhocQueryRequestPayload,
+                homeCommunityId, patientId);
 	}
 
 }
Index: src/org/openhealthtools/ihe/atna/auditor/XCPDInitiatingGatewayAuditor.java
===================================================================
--- src/org/openhealthtools/ihe/atna/auditor/XCPDInitiatingGatewayAuditor.java	(revision 1868)
+++ src/org/openhealthtools/ihe/atna/auditor/XCPDInitiatingGatewayAuditor.java	(working copy)
@@ -103,7 +103,7 @@
 				queryByParameterBytes = queryByParameter.getBytes();
 			}
 		}
-		queryEvent.addXCPDParticipantObject(homeCommunityId, queryByParameterBytes);
+		queryEvent.addXCPDParticipantObject(null, homeCommunityId, queryByParameterBytes);
 		
 		audit(queryEvent);
 	}
Index: src/org/openhealthtools/ihe/atna/auditor/XDSAuditor.java
===================================================================
--- src/org/openhealthtools/ihe/atna/auditor/XDSAuditor.java	(revision 1868)
+++ src/org/openhealthtools/ihe/atna/auditor/XDSAuditor.java	(working copy)
@@ -38,7 +38,8 @@
 	 * @param sourceAltUserId The Source Active Participant Alternate User ID 
 	 * @param sourceUserName The Source Active Participant UserName
 	 * @param sourceNetworkId The Source Active Participant Network ID
-	 * @param humanRequestor The Human Requestor Active Participant User ID
+     * @param humanRequestor The Human Requestor Active Participant User ID
+     * @param humanRequestorName The Human Requestor Active Participant name
 	 * @param registryEndpointUri The endpoint of the registry actor in this transaction (sets destination active participant user id and network id)
 	 * @param registryAltUserId The registry alternate user id (for registry actors)
 	 * @param storedQueryUUID The UUID for the stored query (if transaction is Registry Stored Query)
@@ -51,7 +52,9 @@
 			IHETransactionEventTypeCodes transaction, RFC3881EventOutcomeCodes eventOutcome, // Event
 			String auditSourceId, String auditSourceEnterpriseSiteId, // Audit Source
 			String sourceUserId, String sourceAltUserId, String sourceUserName, String sourceNetworkId, // Source Participant
-			String humanRequestor, // Human Participant
+            String humanRequestor, // Human Participant
+            String humanRequestorName, // Human Participant name
+            boolean humanAfterDestination,
 			String registryEndpointUri, String registryAltUserId, // Destination Participant
 			String storedQueryUUID, String adhocQueryRequestPayload, String homeCommunityId,  // Payload Object Participant
 			String patientId)  // Patient Object Participant
@@ -59,10 +62,21 @@
 		QueryEvent queryEvent = new QueryEvent(systemIsSource, eventOutcome, transaction);
 		queryEvent.setAuditSourceId(auditSourceId, auditSourceEnterpriseSiteId);
 		queryEvent.addSourceActiveParticipant(sourceUserId, sourceAltUserId, sourceUserName, sourceNetworkId, true);
-		if (!EventUtils.isEmptyOrNull(humanRequestor)) {
-			queryEvent.addHumanRequestorActiveParticipant(humanRequestor, null, null, null);
-		}
-		queryEvent.addDestinationActiveParticipant(registryEndpointUri, registryAltUserId, null, EventUtils.getAddressForUrl(registryEndpointUri, false), false);
+
+        if (humanAfterDestination) {
+            queryEvent.addDestinationActiveParticipant(registryEndpointUri, registryAltUserId, null, EventUtils.getAddressForUrl(registryEndpointUri, false), false);
+        }
+
+        if (!EventUtils.isEmptyOrNull(humanRequestor)) {
+			queryEvent.addHumanRequestorActiveParticipant(humanRequestor, null, humanRequestorName, null);
+		} else if(!EventUtils.isEmptyOrNull(humanRequestorName)) {
+            queryEvent.addHumanRequestorActiveParticipant(humanRequestorName, null, humanRequestorName, null);
+        }
+
+        if (! humanAfterDestination) {
+            queryEvent.addDestinationActiveParticipant(registryEndpointUri, registryAltUserId, null, EventUtils.getAddressForUrl(registryEndpointUri, false), false);
+        }
+
 		if (!EventUtils.isEmptyOrNull(patientId)) {
 			queryEvent.addPatientParticipantObject(patientId);
 		}
Index: src/org/openhealthtools/ihe/atna/auditor/XDSConsumerAuditor.java
===================================================================
--- src/org/openhealthtools/ihe/atna/auditor/XDSConsumerAuditor.java	(revision 1868)
+++ src/org/openhealthtools/ihe/atna/auditor/XDSConsumerAuditor.java	(working copy)
@@ -57,7 +57,8 @@
 	 */
 	public void auditRegistryQueryEvent(
 			RFC3881EventOutcomeCodes eventOutcome,
-			String registryEndpointUri, 
+			String registryEndpointUri,
+            String consumerUserName,
 			String adhocQueryRequestPayload,
 			String patientId) 
 	{
@@ -68,7 +69,7 @@
 				new IHETransactionEventTypeCodes.RegistrySQLQuery(), eventOutcome, 
 				getAuditSourceId(), getAuditEnterpriseSiteId(),
 				getSystemUserId(), getSystemAltUserId(), getSystemUserName(), getSystemNetworkId(),
-				getHumanRequestor(),
+				consumerUserName, consumerUserName, true,
 				registryEndpointUri, null,
 				"", adhocQueryRequestPayload, "", 
 				patientId);
@@ -80,6 +81,7 @@
 	 * 
 	 * @param eventOutcome The event outcome indicator
 	 * @param registryEndpointUri The endpoint of the registry in this transaction
+     * @param consumerUserName The Active Participant UserName for the consumer (if using WS-Security / XUA)
 	 * @param storedQueryUUID The UUID of the stored query
 	 * @param adhocQueryRequestPayload The payload of the adhoc query request element
 	 * @param homeCommunityId The home community id of the transaction (if present)
@@ -87,7 +89,8 @@
 	 */
 	public void auditRegistryStoredQueryEvent(
 			RFC3881EventOutcomeCodes eventOutcome,
-			String registryEndpointUri, 
+			String registryEndpointUri,
+            String consumerUserName,
 			String storedQueryUUID, String adhocQueryRequestPayload, String homeCommunityId,
 			String patientId) 
 	{
@@ -105,7 +108,7 @@
 				new IHETransactionEventTypeCodes.RegistryStoredQuery(), eventOutcome, 
 				getAuditSourceId(), getAuditEnterpriseSiteId(),
 				replyToUri, getSystemAltUserId(), getSystemUserName(), getSystemNetworkId(),
-				getHumanRequestor(),
+				consumerUserName, consumerUserName, false,
 				registryEndpointUri, null,
 				storedQueryUUID, adhocQueryRequestPayload, homeCommunityId, 
 				patientId);
@@ -121,7 +124,8 @@
 	 * @param patientId The patient ID the document relates to (if known)
 	 */
 	public void auditRetrieveDocumentEvent(RFC3881EventOutcomeCodes eventOutcome,
-			String repositoryRetrieveUri, 
+			String repositoryRetrieveUri,
+            String userName,
 			String documentUniqueId,
 			String patientId) 
 	{
@@ -132,8 +136,8 @@
 		importEvent.setAuditSourceId(getAuditSourceId(), getAuditEnterpriseSiteId());
 		importEvent.addSourceActiveParticipant(repositoryRetrieveUri, null, null, EventUtils.getAddressForUrl(repositoryRetrieveUri, false), false);
 		importEvent.addDestinationActiveParticipant(getSystemUserId(), getSystemAltUserId(), getSystemUserName(), getSystemNetworkId(), true);
-		if (!EventUtils.isEmptyOrNull(getHumanRequestor())) {
-			importEvent.addHumanRequestorActiveParticipant(getHumanRequestor(), null, null, null);
+		if (!EventUtils.isEmptyOrNull(userName)) {
+			importEvent.addHumanRequestorActiveParticipant(userName, null, userName, null);
 		}
 		if (!EventUtils.isEmptyOrNull(patientId)) {
 			importEvent.addPatientParticipantObject(patientId);
@@ -155,7 +159,8 @@
 	 * @param patientId The patient ID the document(s) relate to (if known)
 	 */	
 	public void auditRetrieveDocumentSetEvent(RFC3881EventOutcomeCodes eventOutcome, 
-			String repositoryEndpointUri, 
+			String repositoryEndpointUri,
+            String userName,
 			String[] documentUniqueIds, String repositoryUniqueId, String homeCommunityId, 
 			String patientId) 
 	{
@@ -169,7 +174,9 @@
 			Arrays.fill(repositoryUniqueIds, repositoryUniqueId);
 		}
 		
-		auditRetrieveDocumentSetEvent(eventOutcome, repositoryEndpointUri, documentUniqueIds, repositoryUniqueIds, homeCommunityId, patientId);
+		auditRetrieveDocumentSetEvent(eventOutcome, repositoryEndpointUri,
+                userName,
+                documentUniqueIds, repositoryUniqueIds, homeCommunityId, patientId);
 	}
 	
 	/**
@@ -184,7 +191,8 @@
 	 * @param patientId The patient ID the document(s) relate to (if known)
 	 */
 	public void auditRetrieveDocumentSetEvent(RFC3881EventOutcomeCodes eventOutcome, 
-			String repositoryEndpointUri, 
+			String repositoryEndpointUri,
+            String userName,
 			String[] documentUniqueIds, String[] repositoryUniqueIds, String homeCommunityId, 
 			String patientId) 
 	{
@@ -198,7 +206,9 @@
 			Arrays.fill(homeCommunityIds, homeCommunityId);
 		}
 		
-		auditRetrieveDocumentSetEvent(eventOutcome, repositoryEndpointUri, documentUniqueIds, repositoryUniqueIds, homeCommunityIds, patientId);
+		auditRetrieveDocumentSetEvent(eventOutcome, repositoryEndpointUri,
+                userName,
+                documentUniqueIds, repositoryUniqueIds, homeCommunityIds, patientId);
 	}
 	
 	/**
@@ -213,7 +223,8 @@
 	 * @param patientId The patient ID the document(s) relate to (if known)
 	 */
 	public void auditRetrieveDocumentSetEvent(RFC3881EventOutcomeCodes eventOutcome, 
-			String repositoryEndpointUri, 
+			String repositoryEndpointUri,
+            String userName,
 			String[] documentUniqueIds, String[] repositoryUniqueIds, String[] homeCommunityIds, 
 			String patientId) 
 	{
@@ -228,8 +239,8 @@
 		 */
 		String replyToUri = "http://www.w3.org/2005/08/addressing/anonymous";
 		importEvent.addDestinationActiveParticipant(replyToUri, getSystemAltUserId(), getSystemUserName(), getSystemNetworkId(), true);
-		if (!EventUtils.isEmptyOrNull(getHumanRequestor())) {
-			importEvent.addHumanRequestorActiveParticipant(getHumanRequestor(), null, null, null);
+		if (!EventUtils.isEmptyOrNull(userName)) {
+			importEvent.addHumanRequestorActiveParticipant(userName, null, userName, null);
 		}
 		if (!EventUtils.isEmptyOrNull(patientId)) {
 			importEvent.addPatientParticipantObject(patientId);
Index: src/org/openhealthtools/ihe/atna/auditor/XDSRegistryAuditor.java
===================================================================
--- src/org/openhealthtools/ihe/atna/auditor/XDSRegistryAuditor.java	(revision 1868)
+++ src/org/openhealthtools/ihe/atna/auditor/XDSRegistryAuditor.java	(working copy)
@@ -58,6 +58,7 @@
 	public void auditRegisterDocumentSetEvent(
 			RFC3881EventOutcomeCodes eventOutcome, 
 			String repositoryUserId, String repositoryIpAddress,
+            String userName,
 			String registryEndpointUri,
 			String submissionSetUniqueId, 
 			String patientId) 
@@ -65,7 +66,10 @@
 		if (!isAuditorEnabled()) {
 			return;
 		}
-		auditRegisterEvent(new IHETransactionEventTypeCodes.RegisterDocumentSet(), eventOutcome, repositoryUserId, repositoryIpAddress, registryEndpointUri, submissionSetUniqueId, patientId);
+		auditRegisterEvent(new IHETransactionEventTypeCodes.RegisterDocumentSet(), eventOutcome,
+                repositoryUserId, repositoryIpAddress,
+                userName,
+                registryEndpointUri, submissionSetUniqueId, patientId);
 	}
 
 	/**
@@ -93,7 +97,7 @@
 				new IHETransactionEventTypeCodes.RegistrySQLQuery(), eventOutcome, 
 				getAuditSourceId(), getAuditEnterpriseSiteId(), 
 				consumerUserId, null, consumerUserName, consumerIpAddress, 
-				null,
+				consumerUserName, consumerUserName, true,
 				registryEndpointUri, getSystemAltUserId(), 
 				"", adhocQueryRequestPayload, "", 
 				patientId);
@@ -126,7 +130,7 @@
 				new IHETransactionEventTypeCodes.RegistryStoredQuery(), eventOutcome, 
 				getAuditSourceId(), getAuditEnterpriseSiteId(), 
 				consumerUserId, null, consumerUserName, consumerIpAddress, 
-				null,
+				consumerUserName, consumerUserName, false,
 				registryEndpointUri, getSystemAltUserId(), 
 				storedQueryUUID, adhocQueryRequestPayload, homeCommunityId, 
 				patientId);
@@ -145,6 +149,7 @@
 	public void auditRegisterDocumentSetBEvent(
 			RFC3881EventOutcomeCodes eventOutcome, 
 			String repositoryUserId, String repositoryIpAddress,
+            String userName,
 			String registryEndpointUri,
 			String submissionSetUniqueId, 
 			String patientId) 
@@ -152,7 +157,10 @@
 		if (!isAuditorEnabled()) {
 			return;
 		}
-		auditRegisterEvent(new IHETransactionEventTypeCodes.RegisterDocumentSetB(), eventOutcome, repositoryUserId, repositoryIpAddress, registryEndpointUri, submissionSetUniqueId, patientId);
+		auditRegisterEvent(new IHETransactionEventTypeCodes.RegisterDocumentSetB(),
+                eventOutcome, repositoryUserId, repositoryIpAddress,
+                userName,
+                registryEndpointUri, submissionSetUniqueId, patientId);
 	}
 	
 	/**
@@ -160,8 +168,9 @@
 	 * 
 	 * @param transaction The specific IHE Transaction (ITI-15 or ITI-41)
 	 * @param eventOutcome The event outcome indicator
-	 * @param repositoryUserId The Active Participant UserID for the repository (if using WS-Addressing)
+     * @param repositoryUserId The Active Participant UserID for the repository (if using WS-Addressing)
 	 * @param repositoryIpAddress The IP Address of the repository that initiated the transaction
+     * @param userName user name from XUA
 	 * @param registryEndpointUri The URI of this registry's endpoint that received the transaction
 	 * @param submissionSetUniqueId The UniqueID of the Submission Set provided
 	 * @param patientId The Patient Id that this submission pertains to
@@ -169,6 +178,7 @@
 	protected void auditRegisterEvent(
 			IHETransactionEventTypeCodes transaction, RFC3881EventOutcomeCodes eventOutcome, 
 			String repositoryUserId, String repositoryIpAddress,
+            String userName,
 			String registryEndpointUri,
 			String submissionSetUniqueId, 
 			String patientId)
@@ -176,6 +186,9 @@
 		ImportEvent importEvent = new ImportEvent(false, eventOutcome, transaction);
 		importEvent.setAuditSourceId(getAuditSourceId(), getAuditEnterpriseSiteId());
 		importEvent.addSourceActiveParticipant(repositoryUserId, null, null, repositoryIpAddress, true);
+        if (! EventUtils.isEmptyOrNull(userName)) {
+            importEvent.addHumanRequestorActiveParticipant(userName, null, userName, null);
+        }
 		importEvent.addDestinationActiveParticipant(registryEndpointUri, getSystemAltUserId(), null, EventUtils.getAddressForUrl(registryEndpointUri, false), false);
 		if (!EventUtils.isEmptyOrNull(patientId)) {
 			importEvent.addPatientParticipantObject(patientId);
Index: src/org/openhealthtools/ihe/atna/auditor/XDSRepositoryAuditor.java
===================================================================
--- src/org/openhealthtools/ihe/atna/auditor/XDSRepositoryAuditor.java	(revision 1868)
+++ src/org/openhealthtools/ihe/atna/auditor/XDSRepositoryAuditor.java	(working copy)
@@ -62,7 +62,8 @@
 	 */
 	public void auditProvideAndRegisterDocumentSetEvent(
 			RFC3881EventOutcomeCodes eventOutcome,
-			String sourceUserId, String sourceIpAddress, 
+			String sourceUserId, String sourceIpAddress,
+            String userName,
 			String repositoryEndpointUri,
 			String submissionSetUniqueId,
 			String patientId) 
@@ -70,7 +71,10 @@
 		if (!isAuditorEnabled()) {
 			return;
 		}
-		auditProvideAndRegisterEvent(new IHETransactionEventTypeCodes.ProvideAndRegisterDocumentSet(), eventOutcome, sourceUserId, sourceIpAddress, repositoryEndpointUri, submissionSetUniqueId, patientId);
+		auditProvideAndRegisterEvent(new IHETransactionEventTypeCodes.ProvideAndRegisterDocumentSet(),
+                eventOutcome, sourceUserId, sourceIpAddress,
+                userName,
+                repositoryEndpointUri, submissionSetUniqueId, patientId);
 	}
 	
 	/**
@@ -85,7 +89,8 @@
 	 */
 	public void auditProvideAndRegisterDocumentSetBEvent(
 			RFC3881EventOutcomeCodes eventOutcome,
-			String sourceUserId, String sourceIpAddress, 
+			String sourceUserId, String sourceIpAddress,
+            String userName,
 			String repositoryEndpointUri,
 			String submissionSetUniqueId,
 			String patientId) 
@@ -93,7 +98,10 @@
 		if (!isAuditorEnabled()) {
 			return;
 		}
-		auditProvideAndRegisterEvent( new IHETransactionEventTypeCodes.ProvideAndRegisterDocumentSetB(), eventOutcome, sourceUserId, sourceIpAddress, repositoryEndpointUri, submissionSetUniqueId, patientId);
+		auditProvideAndRegisterEvent( new IHETransactionEventTypeCodes.ProvideAndRegisterDocumentSetB(),
+                eventOutcome, sourceUserId, sourceIpAddress,
+                userName,
+                repositoryEndpointUri, submissionSetUniqueId, patientId);
 	}
 
 	/**
@@ -107,13 +115,16 @@
 	public void auditRegisterDocumentSetEvent(
 			RFC3881EventOutcomeCodes eventOutcome, 
 			String repositoryUserId,
+            String userName,
 			String registryEndpointUri,
 			String submissionSetUniqueId, String patientId) 
 	{
 		if (!isAuditorEnabled()) {
 			return;
 		}
-		auditRegisterEvent(new IHETransactionEventTypeCodes.RegisterDocumentSet(), eventOutcome, repositoryUserId, registryEndpointUri, submissionSetUniqueId, patientId);
+		auditRegisterEvent(new IHETransactionEventTypeCodes.RegisterDocumentSet(), eventOutcome,
+                repositoryUserId, userName,
+                registryEndpointUri, submissionSetUniqueId, patientId);
 	}
 
 	/**
@@ -127,13 +138,16 @@
 	public void auditRegisterDocumentSetBEvent(
 			RFC3881EventOutcomeCodes eventOutcome, 
 			String repositoryUserId,
+            String userName,
 			String registryEndpointUri,
 			String submissionSetUniqueId, String patientId) 
 	{
 		if (!isAuditorEnabled()) {
 			return;
 		}
-		auditRegisterEvent(new IHETransactionEventTypeCodes.RegisterDocumentSetB(), eventOutcome, repositoryUserId, registryEndpointUri, submissionSetUniqueId, patientId);
+		auditRegisterEvent(new IHETransactionEventTypeCodes.RegisterDocumentSetB(), eventOutcome, repositoryUserId,
+                userName,
+                registryEndpointUri, submissionSetUniqueId, patientId);
 	}
 	
 	/**
@@ -143,12 +157,12 @@
 	 * @param consumerIpAddress The IP address of the document consumer that initiated the transaction
 	 * @param repositoryRetrieveUri The URI that was used to retrieve the document
 	 * @param documentUniqueId The Document Entry Unique ID of the document being retrieved (if known)
-	 * @param patientId The patient ID the document relates to (if known)
 	 */
 	public void auditRetrieveDocumentEvent(
 			RFC3881EventOutcomeCodes eventOutcome,
-			String consumerIpAddress, 
-			String repositoryRetrieveUri, String documentUniqueId) 
+			String consumerIpAddress,
+            String userName,
+			String repositoryRetrieveUri, String documentUniqueId)
 	{
 		if (!isAuditorEnabled()) {
 			return;
@@ -156,6 +170,9 @@
 		ExportEvent exportEvent = new ExportEvent(true, eventOutcome, new IHETransactionEventTypeCodes.RetrieveDocument());
 		exportEvent.setAuditSourceId(getAuditSourceId(), getAuditEnterpriseSiteId());
 		exportEvent.addSourceActiveParticipant(repositoryRetrieveUri, getSystemAltUserId(), null, EventUtils.getAddressForUrl(repositoryRetrieveUri, false), false);
+        if (!EventUtils.isEmptyOrNull(userName)) {
+            exportEvent.addHumanRequestorActiveParticipant(userName, null, userName, null);
+        }
 		exportEvent.addDestinationActiveParticipant(consumerIpAddress, null, null, consumerIpAddress, true);
 		//exportEvent.addPatientParticipantObject(patientId);
 		exportEvent.addDocumentUriParticipantObject(repositoryRetrieveUri, documentUniqueId);
@@ -191,7 +208,8 @@
 			Arrays.fill(repositoryUniqueIds, repositoryUniqueId);
 		}
 		
-		auditRetrieveDocumentSetEvent(eventOutcome, consumerUserId, consumerUserName, consumerIpAddress, repositoryEndpointUri, documentUniqueIds, repositoryUniqueIds, homeCommunityId);
+		auditRetrieveDocumentSetEvent(eventOutcome, consumerUserId, consumerUserName, consumerIpAddress,
+                repositoryEndpointUri, documentUniqueIds, repositoryUniqueIds, homeCommunityId);
 	}
 	
 	/**
@@ -223,7 +241,8 @@
 			Arrays.fill(homeCommunityIds, homeCommunityId);
 		}
 		
-		auditRetrieveDocumentSetEvent(eventOutcome, consumerUserId, consumerUserName, consumerIpAddress, repositoryEndpointUri, documentUniqueIds, repositoryUniqueIds, homeCommunityIds);
+		auditRetrieveDocumentSetEvent(eventOutcome, consumerUserId, consumerUserName, consumerIpAddress,
+                repositoryEndpointUri, documentUniqueIds, repositoryUniqueIds, homeCommunityIds);
 	}
 
 	/**
@@ -252,6 +271,10 @@
 		exportEvent.setAuditSourceId(getAuditSourceId(), getAuditEnterpriseSiteId());
 		exportEvent.addSourceActiveParticipant(repositoryEndpointUri, getSystemAltUserId(), null, EventUtils.getAddressForUrl(repositoryEndpointUri, false), false);
 		exportEvent.addDestinationActiveParticipant(consumerUserId, null, consumerUserName, consumerIpAddress, true);
+        if (! EventUtils.isEmptyOrNull(consumerUserName)) {
+            exportEvent.addHumanRequestorActiveParticipant(consumerUserName, null, consumerUserName, null);
+        }
+
 		//exportEvent.addPatientParticipantObject(patientId);
 		if (!EventUtils.isEmptyOrNull(documentUniqueIds)) {
 			for (int i=0; i<documentUniqueIds.length; i++) {
@@ -276,7 +299,8 @@
 	protected void auditProvideAndRegisterEvent (
 			IHETransactionEventTypeCodes transaction, 
 			RFC3881EventOutcomeCodes eventOutcome,
-			String sourceUserId, String sourceIpAddress, 
+			String sourceUserId, String sourceIpAddress,
+            String userName,
 			String repositoryEndpointUri,
 			String submissionSetUniqueId,
 			String patientId)
@@ -284,6 +308,9 @@
 		ImportEvent importEvent = new ImportEvent(false, eventOutcome, transaction);
 		importEvent.setAuditSourceId(getAuditSourceId(), getAuditEnterpriseSiteId());
 		importEvent.addSourceActiveParticipant(sourceUserId, null, null, sourceIpAddress, true);
+        if (!EventUtils.isEmptyOrNull(userName)) {
+            importEvent.addHumanRequestorActiveParticipant(userName, null, userName, null);
+        }
 		importEvent.addDestinationActiveParticipant(repositoryEndpointUri, getSystemAltUserId(), null, EventUtils.getAddressForUrl(repositoryEndpointUri, false), false);
 		if (!EventUtils.isEmptyOrNull(patientId)) {
 			importEvent.addPatientParticipantObject(patientId);
@@ -307,12 +334,16 @@
 			IHETransactionEventTypeCodes transaction,
 			RFC3881EventOutcomeCodes eventOutcome, 
 			String repositoryUserId,
+            String userName,
 			String registryEndpointUri,
 			String submissionSetUniqueId, String patientId)
 	{
 		ExportEvent exportEvent = new ExportEvent(true, eventOutcome, transaction);
 		exportEvent.setAuditSourceId(getAuditSourceId(), getAuditEnterpriseSiteId());
 		exportEvent.addSourceActiveParticipant(repositoryUserId, getSystemAltUserId(), null, getSystemNetworkId(), true);
+        if (!EventUtils.isEmptyOrNull(userName)) {
+            exportEvent.addHumanRequestorActiveParticipant(userName, null, userName, null);
+        }
 		exportEvent.addDestinationActiveParticipant(registryEndpointUri, null, null, EventUtils.getAddressForUrl(registryEndpointUri, false), false);
 		if (!EventUtils.isEmptyOrNull(patientId)) {
 			exportEvent.addPatientParticipantObject(patientId);
Index: src/org/openhealthtools/ihe/atna/auditor/XDSSourceAuditor.java
===================================================================
--- src/org/openhealthtools/ihe/atna/auditor/XDSSourceAuditor.java	(revision 1868)
+++ src/org/openhealthtools/ihe/atna/auditor/XDSSourceAuditor.java	(working copy)
@@ -53,13 +53,17 @@
 	 */
 	public void auditProvideAndRegisterDocumentSetEvent(RFC3881EventOutcomeCodes eventOutcome, 
 			String repositoryEndpointUri,
+            String userName,
 			String submissionSetUniqueId, 
 			String patientId) 
 	{
 		if (!isAuditorEnabled()) {
 			return;
 		}
-		auditProvideAndRegisterEvent( new IHETransactionEventTypeCodes.ProvideAndRegisterDocumentSet(), eventOutcome, repositoryEndpointUri, submissionSetUniqueId, patientId);
+		auditProvideAndRegisterEvent( new IHETransactionEventTypeCodes.ProvideAndRegisterDocumentSet(),
+                eventOutcome, repositoryEndpointUri,
+                userName,
+                submissionSetUniqueId, patientId);
 	}
 	
 	/**
@@ -72,13 +76,17 @@
 	 */
 	public void auditProvideAndRegisterDocumentSetBEvent(RFC3881EventOutcomeCodes eventOutcome, 
 			String repositoryEndpointUri,
+            String userName,
 			String submissionSetUniqueId, 
 			String patientId) 
 	{	
 		if (!isAuditorEnabled()) {
 			return;
 		}
-		auditProvideAndRegisterEvent( new IHETransactionEventTypeCodes.ProvideAndRegisterDocumentSetB(), eventOutcome, repositoryEndpointUri, submissionSetUniqueId, patientId);
+		auditProvideAndRegisterEvent( new IHETransactionEventTypeCodes.ProvideAndRegisterDocumentSetB(),
+                eventOutcome, repositoryEndpointUri,
+                userName,
+                submissionSetUniqueId, patientId);
 	}
 	
 	/**
@@ -93,6 +101,7 @@
 	protected void auditProvideAndRegisterEvent(
 			IHETransactionEventTypeCodes transaction, RFC3881EventOutcomeCodes eventOutcome, 
 			String repositoryEndpointUri,
+            String userName,
 			String submissionSetUniqueId, 
 			String patientId)
 	{
@@ -106,8 +115,8 @@
 		
 		
 		exportEvent.addSourceActiveParticipant(replyToUri, getSystemAltUserId(), getSystemUserName(), getSystemNetworkId(), true);
-		if (!EventUtils.isEmptyOrNull(getHumanRequestor())) {
-			exportEvent.addHumanRequestorActiveParticipant(getHumanRequestor(), null, null, null);
+		if (!EventUtils.isEmptyOrNull(userName)) {
+			exportEvent.addHumanRequestorActiveParticipant(userName, null, userName, null);
 		}
 		exportEvent.addDestinationActiveParticipant(repositoryEndpointUri, null, null, EventUtils.getAddressForUrl(repositoryEndpointUri, false), false);
 		if (!EventUtils.isEmptyOrNull(patientId)) {
